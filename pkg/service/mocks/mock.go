// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	storage "github.com/mahadeva604/audio-storage"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user storage.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockAudio is a mock of Audio interface.
type MockAudio struct {
	ctrl     *gomock.Controller
	recorder *MockAudioMockRecorder
}

// MockAudioMockRecorder is the mock recorder for MockAudio.
type MockAudioMockRecorder struct {
	mock *MockAudio
}

// NewMockAudio creates a new mock instance.
func NewMockAudio(ctrl *gomock.Controller) *MockAudio {
	mock := &MockAudio{ctrl: ctrl}
	mock.recorder = &MockAudioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAudio) EXPECT() *MockAudioMockRecorder {
	return m.recorder
}

// AddDescription mocks base method.
func (m *MockAudio) AddDescription(userID, audioId int, input storage.UpdateAudio) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDescription", userID, audioId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDescription indicates an expected call of AddDescription.
func (mr *MockAudioMockRecorder) AddDescription(userID, audioId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDescription", reflect.TypeOf((*MockAudio)(nil).AddDescription), userID, audioId, input)
}

// DownloadFile mocks base method.
func (m *MockAudio) DownloadFile(userID, audioId int) (storage.DownloadAudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", userID, audioId)
	ret0, _ := ret[0].(storage.DownloadAudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockAudioMockRecorder) DownloadFile(userID, audioId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockAudio)(nil).DownloadFile), userID, audioId)
}

// GetAudioList mocks base method.
func (m *MockAudio) GetAudioList(userID int, input storage.AudioListParam) (storage.AudioListJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudioList", userID, input)
	ret0, _ := ret[0].(storage.AudioListJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAudioList indicates an expected call of GetAudioList.
func (mr *MockAudioMockRecorder) GetAudioList(userID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudioList", reflect.TypeOf((*MockAudio)(nil).GetAudioList), userID, input)
}

// UploadFile mocks base method.
func (m *MockAudio) UploadFile(userId int, path string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", userId, path)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockAudioMockRecorder) UploadFile(userId, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockAudio)(nil).UploadFile), userId, path)
}

// MockShare is a mock of Share interface.
type MockShare struct {
	ctrl     *gomock.Controller
	recorder *MockShareMockRecorder
}

// MockShareMockRecorder is the mock recorder for MockShare.
type MockShareMockRecorder struct {
	mock *MockShare
}

// NewMockShare creates a new mock instance.
func NewMockShare(ctrl *gomock.Controller) *MockShare {
	mock := &MockShare{ctrl: ctrl}
	mock.recorder = &MockShareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShare) EXPECT() *MockShareMockRecorder {
	return m.recorder
}

// GetSharedList mocks base method.
func (m *MockShare) GetSharedList(input storage.ShareListParam) (storage.ShareListJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedList", input)
	ret0, _ := ret[0].(storage.ShareListJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharedList indicates an expected call of GetSharedList.
func (mr *MockShareMockRecorder) GetSharedList(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedList", reflect.TypeOf((*MockShare)(nil).GetSharedList), input)
}

// ShareAudio mocks base method.
func (m *MockShare) ShareAudio(userID, audioId, shareId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareAudio", userID, audioId, shareId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareAudio indicates an expected call of ShareAudio.
func (mr *MockShareMockRecorder) ShareAudio(userID, audioId, shareId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareAudio", reflect.TypeOf((*MockShare)(nil).ShareAudio), userID, audioId, shareId)
}

// UnshareAudio mocks base method.
func (m *MockShare) UnshareAudio(userID, audioId, shareId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareAudio", userID, audioId, shareId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnshareAudio indicates an expected call of UnshareAudio.
func (mr *MockShareMockRecorder) UnshareAudio(userID, audioId, shareId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareAudio", reflect.TypeOf((*MockShare)(nil).UnshareAudio), userID, audioId, shareId)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockStorage) GetFile(fileId uuid.UUID) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", fileId)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFile indicates an expected call of GetFile.
func (mr *MockStorageMockRecorder) GetFile(fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockStorage)(nil).GetFile), fileId)
}

// StoreFile mocks base method.
func (m *MockStorage) StoreFile(fileId uuid.UUID, file io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFile", fileId, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFile indicates an expected call of StoreFile.
func (mr *MockStorageMockRecorder) StoreFile(fileId, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFile", reflect.TypeOf((*MockStorage)(nil).StoreFile), fileId, file)
}
